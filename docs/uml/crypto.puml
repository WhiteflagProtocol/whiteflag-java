@startuml crypto
!include .stylesheet.puml

left footer WFJL Crypto Class Diagram

package org.whiteflagprotocol.java.crypto {
    class WfCipher <<Destroyable>> {
        {static} +fromKey(WfEncryptionKey)
        ..
        +destroy()
        +isDestroyed() : boolean
        ..
        +setContext(byte[])
        +setContext(String)
        +setInitVector()
        +setInitVector(byte[])
        +isSet()
        ..
        +encrypt(byte[]) : byte[]
        +encrypt(String) : String
        +decrypt(byte[]) : byte[]
        +decrypt(String) : String
    }
    enum WfAuthMethod {
        +TOKEN_PRESHARED
    }
    class WfAuthToken <<Destroyable>> {
        +method
        __
        +destroy()
        +isDestroyed() : boolean
        ..
        +getVerificationData(byte[]) : byte[]
        +getVerificationData(String) : String
    }
    enum WfEncryptionMethod {
        +AES_256_CTR_ECDH
        +AES_256_CTR_PSK
    }
    class WfEncryptionKey <<Destroyable>> {
        +method
        __
        +destroy()
        +isDestroyed() : boolean
        ..
        +getSecretKey(byte[]) : SecretKey
        +getSecretKey(String) : SecretKey
    }
    class WfECDHKeyPair <<Destroyable>> {
        +destroy()
        +isDestroyed() : boolean
        ..
        +getPublicKey() : ECPublicKey
        +getRawPublicKey() : byte[]
        +getSharedKey(byte[]): byte[]
        +getSharedKey(ECPublicKey): byte[]
    }
    class WfCryptoUtil <<Utility>> {
        {static} +convertToByteArray(String) : byte[]
        {static} +convertToHexString(byte[]) : String
        ..
        {static} +hkdf() : byte[]
        {static} #hkdfExtract() : byte[]
        {static} #hkdfExpand() : byte[]
    }
}

WfCipher --- WfEncryptionKey
WfEncryptionKey --- WfEncryptionMethod
WfAuthToken --- WfAuthMethod
WfEncryptionKey ..> WfCryptoUtil
WfEncryptionKey ..> WfECDHKeyPair
WfAuthToken ..> WfCryptoUtil

@enduml