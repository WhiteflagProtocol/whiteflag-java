@startuml messages
!include .stylesheet.puml

left footer WFJL Message Class Diagram

package org.whiteflagprotocol.java.core {
    class WfBasicMessage {
        +type : WfMessageType
        +header : WfMessageSegment
        +body : WfMessageSegment
        +serialize() : String
        +encode() : WfBinaryBuffer
    }
    class WfMessageSegment {
        -fields : WfMessageField[]
        __
        #serialize() : String
        #deserialize(String)
        ..
        #encode() : WfBinaryBuffer
        #decode(WfBinaryBuffer)
    }
    class WfMessageField {
        +name : String
        +pattern : Pattern
        +encoding : Encoding
        +startByte : int
        +endByte : int
        -value : String
        __
        {static} +define(...) : WfMessageField
        {static} +from(WfMessageField) : WfMessageField
        ..
        +get() : String
        +set(String) : Boolean
        ..
        +isValid() : Boolean
        +bitLength() : int
        +byteLength() : int
        ..
        +encode() : byte[]
        +decode(byte[])
    }
    class WfMessageCreator {
        __
        +create()
        ..
        +type(WfMessageType)
        +map(Map, Map)
        +deserialize(String)
        +decode(String)
        +compile(String[])
    }
    enum WfMessageType {
        A
        K
        T
        F
        R
        P
        E
        S
        D
        I
        M
        Q
    }
    class WfMessageDefinitions <<Utility>> {
        {static} #genericHeaderFields : WfMessageField[]
        {static} #authenticationBodyFields : WfMessageField[]
        {static} #cryptoBodyFields : WfMessageField[]
        {static} #testBodyFields : WfMessageField[]
        {static} #freetextBodyFields : WfMessageField[]
        {static} #resourceBodyFields : WfMessageField[]
        {static} #signsignaBodyFields : WfMessageField[]
        {static} #requestFields : WfMessageField[]
    }
    class WfMessageCodec <<Utility>> {
        {static} +encodeField(WfMessageField) : byte[]
        {static} +decodeField(WfMessageField, byte[])
    }
    enum Encoding {
        BIN
        DEC
        HEX
        UTF8
        DATETIME
        DURATION
        LAT
        LONG
    }
    class WfBinaryBuffer <<DataType>> {
        __
        {static} +create()
        {static} +fromByteArray(byte[])
        {static} +fromHexString(String)
        ..
        +copy()
        ..
        +append(WfBinaryBuffer)
        +addMessageField(WfMessageField)
        +extractMessageField(WfMessageField, int)
        #appendBits(byte[], int)
        #extractBits(int, int) : byte[]
        ..
        {static} +convertToByteArray(String) : byte[]
        {static} +convertToHexString(byte[]) : String
        {static} +shiftRight(byte[], int) : byte[]
        {static} +shiftLeft(byte[], int) : byte[]
        {static} #concatinateBits(byte[], int, byte[], int) : byte[]
        {static} #cropBits(byte[], int) : byte[]
    }
}

package org.whiteflagprotocol.java.util {
    class WfJsonMessage {
        +toJsonString() : String
        +create(String)
    }
}

package org.whiteflagprotocol.java {
    class WfMessage {
        -base : WfBasicMessage
        ..
        -metadata : HashMap<>
        ..
        -originator : WfAccount
        -recipient : WfAccount
        __
        {static} +create(String) : WfMessage
        {static} +deserialize(String) : WfMessage
        {static} +deserializeJson(String) : WfMessage
        {static} +decode(byte[]) : WfMessage
        {static} +decrypt(byte[]) : WfMessage
        {static} +compile(String[]) : WfMessage
        ..
        +copy() : WfMessage
        ..
        +getType() : WfMessageType
        +setOriginator(WfAccount)
        +getOriginator() : WfAccount
        +setRecipient(WfAccount)
        +getRecipient() : WfAccount
        +setInitVector(byte[])
        +getInitVector() : byte[]
        ..
        +encode() : WfBinaryBuffer
        +encrypt() : WfBinaryBuffer
        +toJsonString() : String
    }
}

WfJsonMessage <. WfMessage

WfMessage *-- WfBasicMessage
WfMessage ..> WfMessageCreator

WfBinaryBuffer <.. WfMessage

WfBasicMessage -- "1" WfMessageType
WfBasicMessage *-- "2" WfMessageSegment
WfMessageSegment *-- "*" WfMessageField
WfMessageCodec <. WfMessageField
Encoding -+ WfMessageCodec

WfBasicMessage <- WfMessageCreator: creates
WfMessageCreator ..> WfMessageType
WfMessageCreator ..> WfMessageSegment

WfMessageType ..> WfMessageDefinitions
WfMessageDefinitions ..> WfMessageField

@enduml