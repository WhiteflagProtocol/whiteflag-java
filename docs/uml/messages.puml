@startuml messages
!include .stylesheet.puml

left footer WFJL Message Class Diagram

package org.whiteflagprotocol.java.core {
    class WfMessageCore {
        +type : WfMessageType
        +header : WfMessageSegment
        +body : WfMessageSegment
        +serialize() : String
        +encode() : WfBinaryBuffer
    }
    class WfMessageSegment {
        -fields : WfMessageField[]
        #serialize() : String
        #deserialize(String)
        #encode() : WfBinaryString
        #decode(WfBinaryString)
    }
    class WfMessageField {
        +name : String
        +pattern : Pattern
        +encoding : Encoding
        +startByte : int
        +endByte : int
        -value : String
        +encode() : byte[]
        +decode(byte[])
    }
    class WfMessageCreator {
        __
        +create()
        ..
        +type(WfMessageType)
        +map(Map, Map)
        +deserialize(String)
        +decode(String)
        +compile(String[])
    }
    enum WfMessageType {
        A
        K
        T
        F
        R
        P
        E
        S
        D
        I
        M
        Q
    }
    class WfMessageDefinitions <<Utility>> {
        {static} #headerFields : WfMessageField[]
        {static} #authenticationFields : WfMessageField[]
        {static} #cryptoFields : WfMessageField[]
        {static} #testFields : WfMessageField[]
        {static} #freetextFields : WfMessageField[]
        {static} #resourceFields : WfMessageField[]
        {static} #signsignalFields : WfMessageField[]
        {static} #createRequestFields() : WfMessageField[]
    }
    class WfMessageCodec <<Utility>> {
        {static} +encodeField(WfMessageField) : byte[]
        {static} +decodeField(WfMessageField, byte[])
    }
    enum Encoding {
        BIN
        DEC
        HEX
        UTF8
        DATETIME
        DURATION
        LAT
        LONG
    }
    class WfBinaryBuffer <<DataType>> {
        __
        +create()
        ..
        +append(WfBinaryBuffer)
        +addMessageField(WfMessageField)
        +extractMessageField(WfMessageField, int) : WfMessageField
        #appendBits(byte[], int)
        #extractBits(int, int) : byte[]
        ..
        {static} +convertToByteArray(String) : byte[]
        {static} +convertToHexString(byte[]) : String
        {static} +shiftRight(byte[], int) : byte[]
        {static} +shiftLeft(byte[], int) : byte[]
        {static} #concatinateBits(byte[], int, byte[], int) : byte[]
        {static} #cropBits(byte[], int) : byte[]
    }
}

package org.whiteflagprotocol.java.util {
    class WfJsonMessage {
        +toJson() : String
        +create(String)
    }
}

package org.whiteflagprotocol.java {
    class WfMessage {
        -metadata : HashMap<>
        +type : WfMessageType
        +header : WfMessageSegment
        +body : WfMessageSegment
        +type(String) : WfMessage
        +copy(WfMessage) : WfMessage
        +deserialize(String) : WfMessage
        +deserializeJson(String) : WfMessage
        +decode(String) : WfMessage
        +compile(String[]) : WfMessage
        +encode() : String
        +toJson() : String
    }
}

WfJsonMessage <. WfMessage

WfMessage --|> WfMessageCore
WfMessage ---> WfMessageCreator: uses

WfMessageCore --> WfMessageType
WfMessageCore *-- "2" WfMessageSegment
WfMessageSegment *-- "*" WfMessageField
WfMessageCodec <. WfMessageField
Encoding -+ WfMessageCodec

WfMessageCore <- WfMessageCreator: creates
WfMessageCreator ..> WfMessageType
WfMessageCreator ..> WfMessageSegment

WfMessageType --> WfMessageDefinitions
WfMessageDefinitions --> WfMessageField

@enduml