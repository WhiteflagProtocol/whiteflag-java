/**
 * Gradle build file for the Whiteflag Java Library
 */

// Project information
version = '0.3.0-dev'
group = 'org.whiteflagprotocol.java'

// Display basic information
println  "Configuration for ${project.rootProject}";
println  "  project:    ${project.name}"
println  "  group:      ${project.group}"
println  "  version:    ${project.version}";
println  "  directory:  ${project.projectDir}";

// Plugins
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'java-library-distribution'
apply plugin: 'maven-publish'

// Repositories and Dependencies
repositories {
    jcenter()
}

dependencies {
    testImplementation 'junit:junit:4.13'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.0'
}

// Include documentation and source
java {
    withJavadocJar()
    withSourcesJar()
}

// Metadata
jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

// Distribution
distributions {
    main {
        distributionBaseName = project.name
    }
}

// Publishing library as package
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/whiteflagprotocol/whiteflag-java")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            from(components.java)
            pom {
                description = 'Implementation of the Whiteflag Protocol for Java development'
                url = 'https://java.whiteflagprotocol.org'
            }
        }
    }
}

// Javadoc options
javadoc {
    options.tags = [ 'wfver:a:Whiteflag version:',
                     'wfref:a:Whiteflag standard x-reference:' ]
    options.stylesheetFile = project.file("src/main/javadoc/style.css")
    options.overview = "src/main/javadoc/overview.html"
}

// Task to build documentation
task docs(type: Copy) {
    dependsOn javadoc
    from "$buildDir/docs/javadoc"
    into "docs/javadoc"
}
